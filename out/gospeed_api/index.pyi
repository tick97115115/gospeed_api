import httpx
from .models import TASK_STATUS as TASK_STATUS
from .models.continue_a_task import ContinueATask_Response as ContinueATask_Response
from .models.continue_all_tasks import ContinueAllTasks_Response as ContinueAllTasks_Response
from .models.create_a_batch_of_tasks import CreateABatchOfTasks as CreateABatchOfTasks, CreateABatchOfTasks_Response as CreateABatchOfTasks_Response
from .models.create_a_task import CreateATask_Response as CreateATask_Response, CreateATask_fromResolvedId as CreateATask_fromResolvedId, CreateATask_fromUrl as CreateATask_fromUrl
from .models.delete_a_task import DeleteATask_Response as DeleteATask_Response
from .models.get_server_info import GetServerInfo_Response as GetServerInfo_Response
from .models.get_task_info import GetTaskInfo_Response as GetTaskInfo_Response
from .models.get_task_list import GetTaskList_Response as GetTaskList_Response
from .models.pause_a_task import PauseATask_Response as PauseATask_Response
from .models.pause_all_tasks import PauseAllTasks_Response as PauseAllTasks_Response
from .models.resolve_a_request import ResolveRequest as ResolveRequest, ResolveRequest_Response as ResolveRequest_Response
from _typeshed import Incomplete
from gospeed_api.models.delete_tasks import DeleteTasks_Response as DeleteTasks_Response

def my_url_join(first: str, last: str) -> str: ...
def check_response_and_return_data(res: httpx.Response) -> dict: ...

TIMEOUT_SECONDS: int

def construct_status_query_params(status: set[TASK_STATUS] | None) -> dict: ...

class GospeedClient:
    url: Incomplete
    endpoint_info: Incomplete
    endpoint_resolve: Incomplete
    endpoint_task: Incomplete
    endpoint_task_batch: Incomplete
    endpoint_tasks_pause: Incomplete
    endpoint_tasks_continue: Incomplete
    def __init__(self, url) -> None: ...
    def get_server_info(self) -> GetServerInfo_Response: ...
    def resolve_a_request(self, param: ResolveRequest) -> ResolveRequest_Response: ...
    def get_task_list(self, status: set[TASK_STATUS] | None = None) -> GetTaskList_Response: ...
    def create_a_task_from_resolved_id(self, param: CreateATask_fromResolvedId) -> CreateATask_Response: ...
    def create_a_task_from_url(self, param: CreateATask_fromUrl) -> CreateATask_Response: ...
    def delete_a_task(self, rid: str, force: bool = False) -> DeleteATask_Response: ...
    def create_a_batch_of_tasks(self, data: CreateABatchOfTasks) -> CreateABatchOfTasks_Response: ...
    def delete_tasks(self, status: set[TASK_STATUS] | None = None, force: bool = False) -> DeleteTasks_Response: ...
    def get_task_info(self, rid: str) -> GetTaskInfo_Response: ...
    def pause_a_task(self, rid: str) -> PauseATask_Response: ...
    def continue_a_task(self, rid: str) -> ContinueATask_Response: ...
    def pause_all_tasks(self) -> PauseAllTasks_Response: ...
    def continue_all_tasks(self) -> ContinueAllTasks_Response: ...

class AsyncGospeedClient(GospeedClient):
    httpx_client: Incomplete
    def __init__(self, url: str, httpx_async_client: httpx.AsyncClient = ...) -> None: ...
    def __del__(self) -> None: ...
    async def async_get_server_info(self) -> GetServerInfo_Response: ...
    async def async_resolve_a_request(self, param: ResolveRequest) -> ResolveRequest_Response: ...
    async def async_get_task_list(self, status: set[TASK_STATUS] | None = None) -> GetTaskList_Response: ...
    async def async_create_a_task_from_resolved_id(self, param: CreateATask_fromResolvedId) -> CreateATask_Response: ...
    async def async_create_a_task_from_url(self, param: CreateATask_fromUrl) -> CreateATask_Response: ...
    async def async_delete_a_task(self, rid: str, force: bool = False) -> DeleteATask_Response: ...
    async def async_create_a_batch_of_tasks(self, data: CreateABatchOfTasks) -> CreateABatchOfTasks_Response: ...
    async def async_delete_tasks(self, status: set[TASK_STATUS] | None = None, force: bool = False) -> DeleteTasks_Response: ...
    async def async_get_task_info(self, rid: str) -> GetTaskInfo_Response: ...
    async def async_pause_a_task(self, rid: str) -> PauseATask_Response: ...
    async def async_continue_a_task(self, rid: str) -> ContinueATask_Response: ...
    async def async_pause_all_tasks(self) -> PauseAllTasks_Response: ...
    async def async_continue_all_tasks(self) -> ContinueAllTasks_Response: ...
